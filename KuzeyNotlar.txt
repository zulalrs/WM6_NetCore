	-N-Tier Design Repository-
1) Asp.Net Core + Web Application(Model+View+Controller) + Change->Individual User Accounts (Kuzey.UI.Web) projesi açtýk
2) Class Library (.Net Standart) -> (Kuzey.BLL, Kuzey.DAL, Kuzey.Models) oluþturduk.
3) Dependencies kullanarak referanslarý verdik. 
-Web-> Model ve BLL i görecek
-Dal-> Modeli görecek
-BLL-> Model ve DAL ý görecek.
4) Manage Nuget solutiondn Microsoft.EntityFrameworkCore(2.1.1) i 4 Kuzey projemizede kurduk.
5) Models içerisine Entities ve IdentityEntities klasorlerini ekledik.
6) IdentityEntities klasoru içerisine ApplicationUser ve ApplicationRole sýnýflarýný ekledik, propertylerini yazdýk.
7) Entities klasoru içerisine BaseEntity,Category ve Poduct sýnýflarýmýzý ekledik, propertylerini yazdýk.
8) DAL içerisine MyContext sýnýfýný ekledik.
9) Paket ile ilgili bir sýkýntý yaþarsak (Microsoft.AspNetCore.Identity.EntityFrameworkCore(2.1.1)) paketi silip tekrar yuklemeliyiz. Paket Dependencies içerisinde olmalý.
10) Kendi context sýnýfýmýzý oluþturduðumuz için UI.Web deki Data klasorunu sildik.
11) appsettings.json içerisinde yer alan connectionstring ifadesindeki database adýmýzý deðiþtirdik.
12) Startup sýnýfý içerisinde deðiþiklikler yaptýk.
13) MyContext sýnýfý içerisine DbSetlerimizi ekledik.
14) Add-migration yaptýk.
15) Migrationdan sora paket eklememiz gerekirse (Microsoft.EntityFrameworkCore.SqlServer(2.1.1)) kurulumu yapýlmalý.
16) Update database yaptýk.
17) BLL projesine Repository klasoru açtýk ve içerisine de IRepository adýnda bir interface ve RepositoryBase adýnda bir class oluþturduk.
18) Repository klasoru içerisine CategoryRepo ve ProductRepo sýnýflarýný ekledik.
19) Startup classý içerisine repo(Category, Product) classlarýmýzý servis olarak ekledik.
20) MyContext içerisideki IdentityDbContext i generic hale getirdik.
21) LoginPartial view içerisinde IdentityUser yazan yerlere ApplicationUser yazdýk.
22) HomeController içerisinde ve ýndex viewý içerisinde deðiþiklikler yaptýk.
23) *Incluede ile ilgili sýkýntý için birkaç deðiþiklik yaptýk hepsi yorum satýrý þeklinde.
	Deðiþiklik yaptýðýmýz sýnýflar: IRepository,RepositoryBase, HomeControl
24) BLL içerisine Account klasoru oluþturduk. Onun içerisinede MembershipTools sýnýfý açtýk.
25) Startup sýnýfý içerisine MembershipTools sýnýfýný service olarak ekledik.
26) Home controller içerisine MembershipTools ile alakalý eklemeler yaptýk.
27) BaseEntity classý içerisinde AuditEtity adýnda bir class daha ekledik.Bu class içerisine iki property daha ekledik ve add-migration, update-database yaptýk.
28) MyCotext içerisine, giriþ yapan kullanýcýnýn Id sini yakalamak için kodlar yaztýk.O id yi Baseentity içerisinde yer alan CreatedUserId propertysine atayacaðýz.
29) HomeController içerisine product için update kodlarý yazdýk.

*** Dependency injection ile repolarýmýzý service olarak ekledik ve o repolarýmýzý inject ettiðimiz sayfalarda instance ile uðraþmadan yukarýya readonly olarak tanýmladýk.Ve sayfa içerisinde istediðimiz yerde istediðimiz kadar kullanabildik.
***Readonly nesneler constructor ile sadece bir kere deðiþtirilir.
*** Navigation propertyi kullanarak bir where yazacaksak onu incluede dan sonra . diyerek yazmalýyýz.

*** Transient, Scoped, Singleton nedir?
– Transient: Nesneye yapýlan her çaðrýda yeni bir nesne oluþturulur. Stateless nesneye ihtiyaç duyulan durumlarda kullanýlýr. AddTransient() metodu aracýlýðýyla Transient tipinde baðýmlýlýklar oluþturabiliriz.

– Scoped: Yapýlan her request’te nesne tekrar oluþur ve bir request içerisinde sadece bir tane nesne kullanýlýr. Bu yöntem için de AddScoped() metodu kullanýlýyor. Transient ve Scoped kullaným þekilleri nesne oluþturma zamanlarý açýsýndan biraz karýþtýrýlabilir. Transient’da her nesne çaðrýmýnda yeni bir instance oluþturulurken, Scoped’da ise request esnasýnda yeni bir instance oluþur ve o request sonlanana kadar ayný nesne kullanýlýr. Request bazýnda stateless nesne kullanýlmasý istenen durumlarda Scoped baðýmlýlýklarý oluþturabiliriz.

– Singleton: ASP.NET Core uygulamasý baþlatýldýðýnda register edilen nesneye ait sadece bir tane instance oluþur ve uygulamadaki her yerden bu referans çaðrýlýr. Uygulama yeniden baþlatýlana kadar bu nesne referansý kullanýlýr, farklý bir nesne referansý ikinci kez oluþturulmaz. Bu yöntem için de AddSingleton() metodunu kullanýyoruz.